---

Description: Application Deployment on ECS
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Description: Stack environment
    Type: String

  FoundationStackName:
    Description: Foundation stack name
    Type: String

  ComputeStackName:
    Description: Compute stack name
    Type: String

  SsmEnvironmentNamespace:
    Description: Namespace in parameter store from which configuration values will be taken.
    Type: String

  Repository:
    Description: ECR Repository
    Type: String

  ApplicationName:
    Description: Name of the application (part of hostname)
    Type: String

  Owner:
    Description: Person or organization responsible for the running riglet.
    Type: String

  ContainerPort:
    Type: Number

  ContainerMemory:
    Type: Number
    Default: 128

  TaskDesiredCount:
    Type: Number
    Default: 0

  Tag:
    Type: String
    Default: latest

Conditions:
  ShouldCreateErrorLogAlarm: !Not [ !Equals [ !Ref Environment, integration ] ]

Resources:
  LogErrorCountMetricFilter:
    Condition: ShouldCreateErrorLogAlarm
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudWatchLogsGroup
      FilterPattern: "[date, time, level=ERROR, process, separator, thread_name, logger_name, ...]"
      MetricTransformations:
        - MetricValue: 1
          MetricNamespace: Buildit/Application
          MetricName: !Sub "${Owner}${ApplicationName}${Environment}ErrorCount"

  LogErrorCountAlarm:
    Condition: ShouldCreateErrorLogAlarm
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName} - Log Error count"
      AlarmDescription: "Alarm when application logs an error"
      AlarmActions:
        - Fn::ImportValue: !Sub "${FoundationStackName}--SNS--Topic"
      MetricName: !Sub "${Owner}${ApplicationName}${Environment}ErrorCount"
      Namespace: Buildit/Application
      Statistic: Sum
      Threshold: 0.0
      ComparisonOperator: GreaterThanThreshold
      Period: 60
      EvaluationPeriods: 1

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${ComputeStackName}--Cluster"
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref TaskDesiredCount
      TaskDefinition: !Ref TaskDefinition
      PlacementStrategies:
        - Type: spread
          Field: host
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn:
            Fn::ImportValue: !Sub "${FoundationStackName}-${ApplicationName}--TargetGroup"

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 60

  TaskDefinitionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # TODO:  this needs to be tightened-up.
              - Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SsmEnvironmentNamespace}
                Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
              - Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SsmEnvironmentNamespace}/*
                Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParametersByPath

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-${ApplicationName}
      TaskRoleArn: !Ref TaskDefinitionServiceRole
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
          Essential: true
          Memory: !Ref ContainerMemory
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ApplicationName
          Environment:
            - Name: Tag
              Value: !Ref Tag
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ENV_PATH
              Value: !Ref SsmEnvironmentNamespace
            # APPLICATION ENVIRONMENT VARIABLES CURRENTLY GO HERE... TODO: need a better mechanism

Outputs:
