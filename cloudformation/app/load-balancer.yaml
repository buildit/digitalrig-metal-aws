---

Description: Application Deployment Load Balancer Configuration
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Description: Stack environment
    Type: String

  FoundationStackName:
    Description: Foundation stack name
    Type: String

  PublicDomainName:
    Description: Public Domain Name for sites and services created by this stack.
    Type: String

  ApplicationName:
    Description: Name of the application (part of hostname)
    Type: String

  Owner:
    Description: Person or organization responsible for the running riglet.
    Type: String

  Subdomain:
    Description: The subdomain used to build a host name for the "production/preferred" HTTP listener for this app.
    Type: String

  ListenerRulePriority:
    Description: The priority for the listener rule
    Type: Number

Conditions:
  ShouldCreatePreferredCname: !Equals [ !Ref Environment, production ]

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${FoundationStackName}--VpcId"
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      # TargetType: ip

  AppEnvDns:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${PublicDomainName}."
      Comment: DNS for ELB.
      RecordSets:
      - Name: !Sub "${Owner}-${Environment}-${ApplicationName}.${PublicDomainName}."
        Type: A
        AliasTarget:
          HostedZoneId:
            Fn::ImportValue: !Sub "${FoundationStackName}--ALB--CanonicalHostedZoneID"
          DNSName:
            Fn::ImportValue: !Sub "${FoundationStackName}--ALB--DNSName"

  ListenerRuleHttp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpListener"
      Priority: !Ref ListenerRulePriority
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Owner}-${Environment}-${ApplicationName}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ListenerRuleHttps:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpsListener"
      Priority: !Ref ListenerRulePriority
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Owner}-${Environment}-${ApplicationName}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  PreferredListenerRuleHttp:
    Condition: ShouldCreatePreferredCname
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpListener"
      Priority: !Sub "${ListenerRulePriority}9"
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Subdomain}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  PreferredListenerRuleHttps:
    Condition: ShouldCreatePreferredCname
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub "${FoundationStackName}--ALB--HttpsListener"
      Priority: !Sub "${ListenerRulePriority}9"
      Conditions:
        - Field: host-header
          Values:
            - !Sub "${Subdomain}.${PublicDomainName}"
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ExternalHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: HTTPS
        FullyQualifiedDomainName: !Sub "${Owner}-${Environment}-${ApplicationName}.${PublicDomainName}."
        EnableSNI: true
        FailureThreshold: 3
      HealthCheckTags:
      - Key: "Name"
        Value: !Sub "${Owner}-${Environment}-${ApplicationName}.${PublicDomainName}."

  ExternalHealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${Owner}-${Environment}-${ApplicationName}.${PublicDomainName}."
      AlarmDescription: "Alarm when site not reachable"
      AlarmActions:
        - Fn::ImportValue: !Sub "${FoundationStackName}--SNS--Topic"
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Threshold: 1.0
      ComparisonOperator: LessThanThreshold
      Period: 60
      EvaluationPeriods: 1
      Dimensions:
        - Name: HealthCheckId
          Value: !Ref ExternalHealthCheck

Outputs:
  TargetGroupArn:
    Export:
      Name: !Sub "${FoundationStackName}-${ApplicationName}--TargetGroup"
    Value: !Ref TargetGroup

  ApplicationUrl:
    Description: URL of the application
    Value: !Sub "https://${Owner}-${Environment}-${ApplicationName}.${PublicDomainName}"

  PreferredApplicationUrl:
    Condition: ShouldCreatePreferredCname
    Description: Expected preferred/production URL of the application (matching DNS name must be created/updated manually)
    Value: !Sub "https://${Subdomain}.${PublicDomainName}"
